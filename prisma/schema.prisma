generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    regno         Int?
    rollno        String?
    password      String?
    email         String?   @unique
    emailVerified DateTime?
    accounts      Account[]
    sessions      Session[]
}

model Admin {
    id          String @id @default(cuid())
    name        String @unique
    password    String
}

model GuestLectures {
    id          Int @id @default(autoincrement())
    cname       String
    caddress    String
    guestName   String
    guestDate   String
    guestTime   String
}

model IndustryVisit {
    id          Int @id @default(autoincrement())
    cname       String
    caddress    String
    ivName      String
    ivDate      String
    ivTime      String
}

model Workshops {
    id              Int @id @default(autoincrement())
    cname           String
    caddress        String
    workshopName    String
    workshopDate    String
    workshopTime    String
}

model Recruitment {
    id          Int @id @default(autoincrement())
    cname       String
    caddress    String
    Role        String
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}